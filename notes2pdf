#!/bin/bash

# Initialize the IFS as default and store it
IFS=
oIFS=$IFS

FNAME=$1

# Output message if verbose set
function verbout
{
	local icon
	if [ ! -z $2 ]; then
		icon="$2"
	else
		icon='*'
	fi

	if [ $verbose -eq 1 ]; then
		echo -en "   \e[0;37m[\e[1;36m$icon\e[0;37m]\e[0m $1"
	fi
}

# Output line number where error occurs in script
function report_err
{
	echo -e "\e[0;31mError on line \e[1;31m$1\e[0m"
}

function verify_groups
{
	local blocks=( "LSTS,LSTE" "SRCS,SRCE" "EQUS,EQUE" "GRPS,GRPE" "TBLS,TBLE" )
	local bs be cs ce
	local err=0
	unset IFS
	for i in ${blocks[@]}; do
		bs=`cut -d',' -f1 <<< $i`
		be=`cut -d',' -f2 <<< $i`
		cs=`grep -o "$bs" $FNAME | wc -l`
		ce=`grep -o "$be" $FNAME | wc -l`

		if [ $cs -ne $ce ]; then
			echo -e "\e[0;37m[\e[1;31m!\e[0;37m]\e[0m Mismtached ${bs:0:3} block(s)"
			err=1
		fi
	done

	if [ $err -eq 1 ]; then
		echo "Mismatched block(s) found. Aborting"
		exit 1
	fi
}

# This function parses and formats bullet lists
# Bullet levels are denoted with indentations
# and any text immediately following a * is treated
# as the bullet "icon" 
#	Ex: '*a.' in the note file becomes 'a.' in the PDF
function list
{
	local file="$1"
	local pi=-1
	local cnt=-1
	local psh=0

	local close=0

	local first style

	while IFS=':' read -r tnum line; do
		if [[ "$line" != "LSTS" ]] && [[ "$line" != "LSTE" ]]; then
			if [ $pi -lt $tnum ]; then
				for i in `seq 0 $pi`; do
					echo -en "\t"
				done
		
				echo "\\begin{itemize}"
				close=$((close+1))
			fi

			if [ $pi -gt $tnum ]; then
				for i in `seq 0 $pi`; do
					echo -en "\t"
				done

				if [ $psh -eq 1 ]; then
					echo -en "\t"
					psh=0
				fi

				echo "\\end{itemize}"
				close=$((close-1))
			fi
			
			first=$(echo $line | sed 's/^[ \t]*//' | cut -d' ' -f1)
			if [ ${#first} -gt 1 ]; then
				style=${first:1}
				line=$(echo $line | sed 's/\*\(.*\) /\\item['"$style"']{/;s/[[:space:]]*$//')
			else
				line=$(echo $line | sed 's/* /\\item{/;s/[[:space:]]*$//')
			fi
			line="$line}"
			
			echo -e "\t$line"

			if [ $pi -gt $tnum ] || [ $pi -eq -1 ]; then
				cnt=0
			elif [ $pi -lt $tnum ]; then
				cnt=1
			fi
	
			pi=$tnum
		fi
	done< <(awk '/LSTS/{flag=1}/LSTE/{print; flag=0}flag' $file | awk '{ match($0, /^[\t]*/); printf("%d:%s\n", RLENGTH, $0); }')

	while [ $close -gt 0 ]; do
		for i in `seq 0 $((close-2))`; do
			echo -en "\t"
		done

		echo "\\end{itemize}"

		close=$((close-1))
	done
}

# This function formats TBL blocks
# TBLS:cols:title is parsed and formatted first
# The first column is formatted as a column title row
function table
{
	local file="$1"
	local title cols
	local ctitle=0
	while IFS= read -r line; do
		if [[ "$line" == "TBLS"* ]]; then
			cols=`cut -d':' -f2 <<< $line`
			title=`cut -d':' -f3 <<< $line`
			echo "\\begin{center}"
			echo -n "\\begin{tabular}{ |"
			IFS=' '
			for i in `seq 1 $cols | tr '\n' '\ '`; do
				echo -n "c| "
			done | sed 's/ c/c/g'
			echo "}"
			if [[ ! -z $(sed 's/[ \t]//g' <<< $title) ]]; then 
				echo "\\hline"
				echo "\\multicolumn{$cols}{|c|}{$title} \\\\"
			fi
			echo "\\hline"
			ctitle=1
		elif [[ "$line" != "TBLE" ]]; then
			line=$(echo -n $line | tr -s '[\t]' '\t' | sed 's/\t/ \& /g')
			echo -e "\t$line \\\\\\\\"
			if [ $ctitle -eq 1 ]; then
				echo -e "\t\\\\hline"
				echo -e "\t\\\\hline"
				ctitle=0
			fi
		else
			echo -e "\\\\hline\n\\\\end{tabular}\n\\\\end{center}"
		fi
	done< <(awk '/TBLS/{flag=1}/TBLE/{print; flag=0}flag' $1)
}

# This function is used with equation block parsing
function get_line_count
{
	local file start end num cnt
	file="$1"
	start="$2"
	end="$3"
	num=$4

	sed -n '/'"$start"'/{:a;N;/'"$end"'/!ba;x;s/^/x/;/^x\{'"$num"'\}$/{x;p;q};x}' $file > out
	cnt=`wc -l < out`
	rm out

	echo $((cnt-2))
}

# Isolate frc() from within a line; retains +, *, / from being interpretted by sed
function isolate_frc
{
	local l="$1"
	local o c d

	if [[ "$l" != "frc("* ]]; then
		l=$(echo $l | sed 's/frc(/ frc(/' | cut -d' ' -f 2-)
	fi

	IFS=
	l=$(echo $l | sed 's/ \+/\+/;s/\+ /\+/;s/\+/_plus/')
	l=$(echo $l | sed 's/ \*/\*/;s/\* /\*/;s/\*/_times/')
	l=$(echo $l | sed 's/ \//\//;s/\/ /\//;s/\//_divide/')

	o=$(echo $l | awk '{ split($0, chars, ""); o = 0; for (i=1;i<=length($0);i++) { if (chars[i] == "(") { o++ } } print o }')
	c=$(echo $l | awk '{ split($0, chars, ""); c = 0; for (i=1;i<=length($0);i++) { if (chars[i] == "(") { c++ } } print c }')

	if [ $c -gt $o ]; then
		d=$((c-o))
		while [ $d -gt 0 ]; do
			l=$(echo $l | sed 's/\(.*\))/\1/')
			d=$((d-1))
		done
	fi
	
	IFS=
	l=$(echo $l | sed 's/_plus/\+/')
	l=$(echo $l | sed 's/_times/\*/')
	l=$(echo $l | sed 's/_divide/\//')
	echo $l
}

# Parses through frc() and formats all frc() into proper LaTeX
function parse_frc
{
	local l="$1"

	while [[ "$l" == *"/"* ]]; do
		l=$(echo $l | sed 's/\(.*\)\//\1\\/')
		l=$(echo $l | sed 's/frc(/frac/')
		l=$(echo $l | awk -F'\' '{ printf("%s}{%s\n", $1, $2); }')
		l=$(echo $l | sed 's/\(.*\))/\1}/')

		echo $l | sed 's/frac/\\\\frac{/g'
	done | tail -n 1
}

# This function generates "function" replacement files:
# The first argument is the input file (what needs to be parsed)
# The second argument is the output file (where to write the replacements
# The third argument is the function to look for
# The fourth argument is the format string
	# The format string follows this structure:
	# Original text:Replacement
# The fifth argument (optional) defines the field separator
function parse_fnc
{
	local o c d
	verbout "Generating replacements for $3)" ":"
	if grep -q "$3" $1; then
		echo -n '' > funcs/$2
		while IFS= read -r l; do
			o=$(echo $l | awk '{ split($0, chars, ""); o = 0; for (i=1;i<=length($0);i++) { if (chars[i] == "(") { o++ } } print o }')
			c=$(echo $l | awk '{ split($0, chars, ""); c = 0; for (i=1;i<=length($0);i++) { if (chars[i] == "(") { c++ } } print c }')
			
			if [ $c -gt $o ]; then
				d=$((c-o))
				while [ $d -gt 0 ]; do
					l=$(echo $l | sed 's/\(.*\))/\1/')
					d=$((d-1))
				done
			fi

			if [ -e $5 ]; then
				grep "$3" <<< $l | sed 's/).*//;s/'"$3"'//' | awk '{ printf('"$4"') }' >> func/$2
			else
				grep "$3" <<< $l | sed 's/).*//;s/'"$3"'//' | awk -F"$5" '{ printf('"$4"') }' >> funcs/$2
			fi
		done< <(sed 's/'"$3"'/\n'"$3"'/g' $1 | grep "$3")
	fi
}

# Need to fix where lang and filename or inserted
function group_src
{
	local cIFS ngrps lcnt file lang
	cIFS=$IFS
	ngrps=`grep 'GRPS' src/groups | wc -l`
	IFS=
	for i in `seq 1 $ngrps`; do
		sed -n '/GRPS/{:a;N;/GRPE/!ba;x;s/^/x/;/^x\{'"$i"'\}$/{x;p;q};x}' src/groups > src/$i.grp
	done

	for i in `seq 1 $ngrps`; do
		lcnt=`grep 'SRCS' src/$i.grp | sort | uniq -c | wc -l`
		if [ $lcnt -gt 1 ]; then
			echo -e "\e[0;37m[\e[1;31m!\e[0;37m]\e[0m Mixed languages found in group #$i. Ignoring."
		else
			lang=`grep 'SRCS' src/$i.grp | head -1 | cut -d':' -f2`
			file=`head -n1 src/$i.grp | cut -d':' -f2`
			awk '/SRCS/{flag=1; next;}/SRCE/{flag=0;} flag' src/$i.grp > src/$i.src
			cp src/$i.src src/$file
			sed -i '1i #'"$lang"':'"$file"'' src/$i.src
		fi
	done
}

# Execute based on language
function insert_src_output
{
	local enc
	local sfile="$1"
	local group=$2
	local lang=`head -n1 $sfile | cut -d':' -f1`
	local file=`head -n1 $sfile | cut -d':' -f2`
	
	case "$lang" in
		\#python)
			# Check for syntax errors
			if [ $debug -eq 1 ]; then
				python3 -m py_compile src/$file 2> >(tee debug/${file%.*}.err >&2)
				cp src/$file debug/
				if [ ! -s debug/${file%.*}.err ]; then
					rm -f debug/${file%.*}.err
				fi
			else
				python3 -m py_compile src/$file 2> /dev/null
			fi
			
			# I pass info/error messages to stderr (1>&2) so they don't get inserted in the tex file
			if [ $? -ne 0 ]; then
				echo -e "\e[0;37m[\e[1;31m!\e[0;37m]\e[0m Error(s) encountered in src/$file (group #$group)" 1>&2
			else
				echo "\\pagebreak"
				echo "\\begin{center}"
				echo "\\textsc{\\large Output of code segment(s)}\\\\"
				echo "\\end{center}"
				echo "\\begin{minimal}"
				if grep -q 'input(' src/$file; then
					# How to handle capturing user input using script
					if [ ! -f typescript ]; then
						echo "" 1>&2
						echo -e "\e[0;37m[\e[1;33m!\e[0;37m]\e[1;33m Action required: \e[0mRun '\e[0;37mscript -q -c \"python3 src/$file\"\e[0m'" 1>&2
						echo -e "    Then run \e[0;37mfg\e[0m" 1>&2
					
						# background notes2pdf
						(kill -SIGTSTP $$ > /dev/null) &
					fi
					# cleanup the typescript file and output (formatted)
					col -bp < typescript | tr -d '\15\32' | sed '1d;$d' | awk '/^$/ {nlstack=nlstack "\n";next;} {printf "%s",nlstack; nlstack=""; print;}' | sed -e '$ ! s/$/\\\\/g'
			
					rm typescript
				else
					python3 src/$file | tr -d '\15\32' | sed -e '$ ! s/$/\\\\/g'
				fi
				echo "\\end{minimal}"
			fi
			;;
		# add more languages here
		*)
			;;
	esac
}

# Show formatted help message
function showhelp
{
	echo "Usage: notes2pdf <switch(es)> <file>"
	echo -e "\n \e[4mPossible switches:\e[0m\n"
	tr -s '\t' '\t' <<< '
-h, --help		Display this help
-v, --verbose	Verbose output
-d, --debug		Retain log and tex files for debugging
-e, --execute	Attempt to execute source code; requires GRPS/GRPE flags present
-o, --output <filename>	Specify the name of the PDF file
-p, --preview	Show a preview of the PDF on completion
' | sed 's/\t/: :/g' | column -s ':' -t | sed 's/^/  /g'
	echo
}

# Cleanup on exit
# Reset IFS, remove temporary files/directories
function at_exit
{
	IFS=$oIFS
	rm -rf funcs
	rm -rf src
	rm -f lout
	rm -f tout
	if [ $error -eq 0 ]; then
		rm -f *.log
	fi
	rm -f *.aux
	if [ $debug -eq 0 ]; then
		rm -f *.tex
	fi
	rm -f *.tmp
}

trap at_exit INT EXIT

trap 'report_err $LINENO' ERR 

##### ------ SCRIPT START ------ #####

os=""
if grep -qE "(Microsoft|WSL)" /proc/version &> /dev/null; then
	os="win"
elif [[ "$OSTYPE" == "darwin"* ]]; then
	os="osx"
else
	os="nix"
fi

if [[ "$os" == "osx" ]]; then
	alias sed="gsed"
	alias grep="ggrep"
fi

rm -f typescript

debug=0
output=""
error=0
execute=0
preview=0
_help=0
verbose=0

rm -f *.tex
rm -f *.log

# set help switch to 1 if no args passed or arg1 = -h or --help
if [ $# -gt 0 ]; then
	if [[ "$1" != "-h" ]] && [[ "$1" != "--help" ]]; then
		# Iterate through switches
		while [ $# -gt 1 ]; do
			case "$1" in
				-d)
					;&
				--debug)
					debug=1
					;;
				-e)
					;&
				--execute)
					execute=1
					;;
				-v)
					;&
				--verbose)
					verbose=1
					;;
				-o)
					;&
				--output)
					if [[ "$2" == *".notes" ]] || [[ "$2" == "-"* ]]; then
						echo "Missing filename argument for '$1'. Aborting."
						exit 1
					fi
					output="${2%.*}"
					shift
					;;
				-p)
					;&
				--preview)
					preview=1
					;;
				-h)
					;&
				--help)
					_help=1
					;;
				*)
					echo -e "\e[0;37m[\e[1;33m?\e[0;37m]\e[0m Unknown option '$1'. Ignoring"
					;;
			esac
			shift
		done
	else
		_help=1
	fi
else
	echo -e "Missing arguments\n"
	_help=1
fi

# if help switch set, show help
if [ $_help -eq 1 ]; then
	showhelp
	exit 0
fi

# Output message and exit if file not found, otherwise set FNAME
if [ ! -f ${1%.*}.notes ]; then
	echo -e "\e[0;37m[\e[1;31m!\e[0;37m]\e[0m File not found. Aborting."
	exit 1
else
	FNAME="$1"
fi

verify_groups

# Output message based on debug switch
if [ $debug -eq 1 ]; then
	rm -rf debug/
	mkdir -p debug/
	echo -e "\e[0;37m[\e[1;32mi\e[0;37m]\e[0m Starting notes2pdf in debug mode"
	echo -e "   \e[0;37m[\e[1;36m+\e[0;37m]\e[0m Debug information will be stored in debug/${FNAME%.*}.log"
	echo -e "   \e[0;37m[\e[1;36m+\e[0;37m]\e[0m debug/${FNAME%.*}.log corresponds with debug/${FNAME%.*}.tex"
else
	echo -e "\e[0;37m[\e[1;32mi\e[0;37m]\e[0m Starting notes2pdf"
fi

# output formatting
if [ $verbose -eq 1 ]; then
	echo
fi

# output message if output file specified via output switch
if [ ! -z $output ]; then
	echo -e "\e[0;37m[\e[1;32mi\e[0;37m]\e[0m $FNAME will be written to $output.pdf"
fi

if [ $execute -eq 1 ]; then
	if ! grep -q 'GRP' $FNAME; then
		echo -e "\e[0;37m[\e[1;31m!\e[0;37m]\e[0m Source groups not defined. Ignoring execute switch"
		execute=0
	else
		verbout "Execute switch set, collecting Source groups" "+"
		mkdir -p src/
		awk '/GRPS/{flag=1;}/GRPE/{print; flag=0;} flag' $FNAME > src/groups
		group_src
	fi
fi

# out.tmp is a temporary file that contains most of the formatted content

# Initialize the LaTeX preamble, conditionally include based upon note contents
verbout "Defining template defaults" "+"
cat > out.tmp <<EOF
\\documentclass[letterpaper,12pt]{article}
\\usepackage[letterpaper,margin=0.75in]{geometry}
\\usepackage{xcolor}
\\usepackage{color}

\\usepackage[english]{babel}
\\usepackage[utf8x]{inputenc}
\\usepackage{fullpage}
\\usepackage{titlesec}
EOF

if grep -q 'EQUS\|SRCS' $FNAME; then
	verbout "Found Equation/Source block(s) in $FNAME"
	verbout "Updating template" "+"
cat >> out.tmp <<EOF
\\usepackage{tcolorbox}

\\newtcolorbox{minimal}{
	sharp corners,
	colback=white,
	colframe=black,
	notitle,
	before skip=1.5em,
	after skip=1.5em,
}

EOF
fi

if grep -q 'equ(.*)\|EQUS' $FNAME; then
	verbout "Found Equation(s) in $FNAME"
	verbout "Updating template" "+"
	echo "\\usepackage{mathtools}" >> out.tmp
	echo "" >> out.tmp
fi

if grep -q 'SRCS' $FNAME; then
	verbout "Found Source block(s) in $FNAME"
	verbout "Updating template" "+"
cat >> out.tmp <<EOF
\\usepackage{listings}

\\definecolor{mygreen}{rgb}{0,0.6,0}
\\definecolor{mygray}{rgb}{0.5,0.5,0.5}
\\definecolor{mymauve}{rgb}{0.58,0,0.82}

\\lstset{
	backgroundcolor=\\color{white},
	basicstyle=\\footnotesize,
	breaklines=true,
	captionpos=b,
	commentstyle=\\color{mygreen},
	keywordstyle=\\color{blue},
	stringstyle=\\color{mymauve},
	showstringspaces=false,
}

EOF
fi

verbout "Initializing Document data"
# Set the title format and begin the document block
echo "\\titleformat{\\section}[block]{\\color{blue}\\Large\\bfseries\\filcenter}{}{1em}{}" >> out.tmp
echo "\\begin{document}" >> out.tmp

# funcs contains files that define replacements for certain "functions" in the note file
mkdir -p funcs

# The "function" cmb() is used for defining a choose b notation
# parse_fnc finds all matching calls to a "function"
parse_fnc "$FNAME" "cmb" 'cmb(' '"cmb(%s,%s):{%s \\\\choose %s}\n",$1,$2,$1,$2' ','

# these keep track of the number of each block type found in the notes file
lstc=0
tstc=0
equc=0
srcc=0
grpc=0

# These are toggled to determine when inside of a block or not
eflag=0
sflag=0
tflag=0
gflag=0

# The default IFS
mIFS=

# TODO Add PAGEBREAK handling immediately after GRPE
# reads each line in the file
while IFS=$mIFS read -r line; do
	
	# These conditions are used to determine what block the current line is in
	# And customize the line output as necessary
	if [[ "$line" == "LSTS" ]]; then
		verbout "Entering List block" ">" 
		lstc=$((lstc+1))
		line="_LST$lstc"
	fi

	if [[ "$line" == "GRPS"* ]]; then
		verbout "Entering Group block" ">"
		grpc=$((grpc+1))
	fi

	if [[ "$line" == "GRPE" ]]; then
		verbout "Leaving Group block" "<"
		line="_GRP$grpc"
	fi

	if [ $tflag -eq 2 ]; then
		tflag=1
	elif [ $tflag -eq 3 ]; then
		tflag=0
	fi

	if [[ "$line" == "TBLS"* ]]; then
		verbout "Entering Table block" ">"
		tstc=$((tstc+1))
		line="_TBL$tstc"
		tflag=2
	fi

	if [[ "$line" == "TBLE" ]]; then
		verbout "Leaving Table block" "<"
		tflag=3
	fi

	if [[ "$line" == "EQUS" ]]; then
		verbout "Entering Equation block" ">"
		eflag=1
		equc=$((equc+1))
		cnt=`get_line_count "$FNAME" "EQUS" "EQUE" $equc`
	fi

	if [[ "$line" == "EQUE" ]]; then
		verbout "Leaving Equation block" "<"
		eflag=0
	fi

	if [[ "$line" == "SRCS:"* ]]; then
		verbout "Entering Source block" ">"
		sflag=1
	fi

	if [[ "$line" == "SRCE" ]]; then
		verbout "Leaving Source block" "<"
		sflag=0
	fi
	
	# Format all { and } to \{ and \} if not in a source code block
	if [ $sflag -eq 0 ]; then
		line=$(echo $line | sed 's/{/\\{/g;s/}/\\}/g')
	fi

	# Special case: Fractions can be within fractions
	if [[ "$line" == *"frc("* ]]; then
		verbout "Fraction(s) found. Starting fraction parse task"
		# The IFS needs to be a space now
		IFS=" "
		# for each "word" (field) in the line...
		for field in $line; do
			# if the field contains frc( 
			if [[ "$field" == *"frc("* ]]; then
				
				# isolate the frc() "function"
				iso=`isolate_frc "$field"`
				# format the frc() "function"
				prs=`parse_frc "$iso"`
				# and replace it within the line
				line=$(echo $line | sed "s~$iso~$prs~")
			fi
		done
		verbout "Fraction parse task finished"
	fi

	# Format the equation blocks
	if [ $eflag -eq 1 ]; then
		verbout "Inside Equation block, formatting content"
		if [[ "$line" != "EQU"* ]]; then
			line="$line \\nonumber"
			if [ $cnt -gt 0 ]; then
				line="$line \\\\"
			fi
		fi
		cnt=$((cnt-1))
	fi
	
	# output the line to out.tmp
	if [ $tflag -eq 0 ] || [ $tflag -eq 2 ]; then
		echo $line >> out.tmp
	fi
done < $FNAME # FNAME is the input file)

# If function replacements defined with parse_fnc, replace them
verbout "Inserting parsed functions"
if [ "$(ls -A funcs)" ]; then
	while read -r fnf; do
		while IFS=":" read -r o r; do
			sed -i "s~$o~$r~" out.tmp
		done < $fnf
	done< <(ls funcs/*)
fi

IFS=
# Format list blocks
if grep -q 'LSTS' $FNAME; then
	verbout "Formatting List block(s)"
	echo '' > lout
	for i in `seq 1 $lstc`; do
		sed -n '/LSTS/{:a;N;/LSTE/!ba;x;s/^/x/;/^x\{'"$i"'\}$/{x;p;q};x}' $FNAME > lists
		echo "LSTS" >> lout
		list "lists" >> lout
		echo "LSTE" >> lout
		rm lists
	done
	verbout "Formatted List blocks"
fi

# Format table blocks
if grep -q 'TBLS' $FNAME; then
	verbout "Formatting Table block(s)"
	echo '' > tout
	for i in `seq 1 $tstc`; do
		sed -n '/TBLS/{:a;N;/TBLE/!ba;x;s/^/x/;/^x\{'"$i"'\}$/{x;p;q};x}' $FNAME > tables
		echo "TBLS" >> tout
		table "tables" >> tout
		echo "TBLE" >> tout
		rm tables
	done
fi

# Replace SRC* lines with proper LaTeX/listings beginning/end
verbout "Formatting Source blocks"
while read -r line; do
	lang=`cut -d':' -f2 <<< $line`
	sed -i "s~$line~\\\\begin{minimal}\n\\\\begin{lstlisting}[language=$lang]~" out.tmp
done< <(grep 'SRCS' out.tmp)

sed -i "s/^SRCE/\\\\end{lstlisting}\n\\\\end{minimal}/g" out.tmp

verbout "Formatting Title lines"
# Replace '# Title' lines with proper LaTeX headers
while read -r line; do
	title=`cut -d' ' -f 2- <<< $line`

	title="\\\\section{$title}"
	sed -i "s~$line~$title~" out.tmp
done< <(grep '^# ' out.tmp)

# End the document block
echo "\end{document}" >> out.tmp

# Final cleanup
sed -i 's/#/\\#/g' out.tmp
sed -i '/^LST.*/d' out.tmp
sed -i '/^GRP.*/d' out.tmp
sed -i '/[ \t]*\*/d' out.tmp

verbout "Formatting wrapper function(s)"
# Replace wrapper functions with their LaTeX equivalent
sed -i 's/equ(\([^]]*\))/\\( \1 \\)/g' out.tmp
sed -i 's/uln(\([^]]*\))/\\underline{ \1 }/g' out.tmp

verbout "Constructiong proper Equation blocks"
# Format EQU* lines
sed -i 's/EQUS/\\begin{minimal}\n\\begin{align}/g' out.tmp
sed -i 's/EQUE/\\end{align}\n\\end{minimal}\n/g' out.tmp

verbout "Adding page breaks"
sed -i 's/PBREAK/\\pagebreak/g' out.tmp

# Create the final LaTeX file by inserting formatted lists and tables where necessary
FNAME="${FNAME%.*}"
verbout "Compiling formatted content to $FNAME.tex"
while IFS= read -r line; do

	if [[ "$line" == "_LST"* ]]; then
		verbout "List block found. Inserting formatted content" "+"
		gn=$(echo $line | sed 's/_LST//')
		sed -n '/LSTS/{:a;N;/LSTE/!ba;x;s/^/x/;/^x\{'"$gn"'\}$/{x;p;q};x}' lout | grep -v 'LST' >> $FNAME.tex
	elif [[ "$line" == "_TBL"* ]]; then
		verbout "Table block found. Inserting formatted content" "+"
		tn=$(echo $line | sed 's/_TBL//')
		sed -n '/TBLS/{:a;N;/TBLE/!ba;x;s/^/x/;/^x\{'"$tn"'\}$/{x;p;q};x}' tout | grep -v 'TBL' >> $FNAME.tex
	elif [[ "$line" == "_GRP"* ]]; then
		if [ $execute -eq 1 ]; then
			verbout "Attempting to insert Source Code execution" "+"
			grn=$(echo $line | sed 's/_GRP//')
			insert_src_output "src/$grn.src" $grn >> $FNAME.tex
		fi
	else
		echo $line >> $FNAME.tex
	fi
done < out.tmp

# Generate the PDF and display success/error messages
verbout "Attempting to convert $FNAME.tex to PDF"
pdflatex -interaction=nonstopmode -file-line-error $FNAME.tex > /dev/null 

stat=$?
if [ $stat -ne 0 ]; then
	echo
	echo -e "\e[0;37m[\e[1;31m!\e[0;37m]\e[0m notes2pdf encountered an error from pdflatex."
	if [ $debug -eq 0 ]; then
		echo -e "\t\e[0;37m\e[1;33m?\e[0;37m]\e[0m Try running notes2pdf --debug $FNAME.notes"
	fi
	error=1
else
	if [ ! -z $output ]; then
		verbout "Saving PDF as ${output%.*}.pdf"
		mv $FNAME.pdf $output
		FNAME="${output%.*}"
	fi
	echo
	echo -e "\e[0;37m[\e[1;32mi\e[0;37m]\e[0m PDF written to $FNAME.pdf"
fi

if [ $debug -eq 1 ]; then
	mv $FNAME.tex debug/
	mv $FNAME.log debug/
fi

if [ $preview -eq 1 ]; then
	if [ $error -eq 0 ]; then
		echo -e "\e[0;37m[\e[1;32mi\e[0;37m]\e[0m Opening preview of $FNAME.pdf" 
		# This is tested
		if [[ "$os" == "win" ]]; then
			# Determine if Ubuntu, openSUSE, or SUSE Linux Enterprise Server 12
			verbout "Determining WSL Linux Distro" "?"
			ubuntu="CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc"
			suse="46932SUSE.openSUSELeap42.2_022rs5jcyhyac"
			entsuse="46932SUSE.SUSELinuxEnterpriseServer12SP2_022rs5jcyhyac"
			if cmd.exe /C dir "%userprofile%\\AppData\\Local\\Packages" | grep -q "$ubuntu"; then
				lhome="%userprofile%\\AppData\\Local\\Packages\\$ubuntu\\LocalState\\rootfs$(pwd | sed 's/\//\\/g')\\"
			elif cmd.exe /C dir "%userprofile%\\AppData\\Local\\Packages" | grep -q "$suse"; then
				lhome="%userprofile%\\AppData\\Local\\Packages\\$suse\\LocalState\\rootfs$(pwd | sed 's/\//\\/g')\\"
			elif cmd.exe /C dir "%userprofile%\\AppData\\Local\\Packages" | grep -q "$entsuse"; then
				lhome="%userprofile%\\AppData\\Local\\Packages\\$entsuse\\LocalState\\rootfs$(pwd | sed 's/\//\\/g')\\"
			fi
			cmd.exe /C start $lhome$FNAME.pdf
		elif [[ "$os" == "osx" ]]; then
			open $FNAME.pdf
		elif [[ "$os" == "nix" ]]; then
			xdg-open $FNAME.pdf > /dev/null 2> /dev/null
		fi
	else
		echo -e "\e[0;37m[\e[1;31m!\e[0;37m]\e[0m Error(s) exist in $FNAME.notes. Preview unavailable." 
	fi
fi
